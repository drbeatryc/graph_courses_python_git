

```{python}
import pandas as pd
import country_converter as cc
```

## Data


```{python}
# Load datasets
oil_consumption = pd.read_csv(
    "https://raw.githubusercontent.com/the-graph-courses/idap_book/main/data/oil_consumption.csv"
)
tidyr_population = pd.read_csv(
    "https://raw.githubusercontent.com/the-graph-courses/idap_book/main/data/tidyr_population.csv"
)
country_regions = pd.read_csv(
    "https://raw.githubusercontent.com/the-graph-courses/idap_book/main/data/country_continent_data.csv"
)


oil_2012 = (
    oil_consumption[oil_consumption["year"] == 2012].copy().drop(columns=["year"])
)

# people data
people = pd.DataFrame({"name": ["Alice", "Bob", "Charlie"], "age": [25, 32, 45]})

test_info_many = pd.DataFrame(
    {
        "name": ["Alice", "Alice", "Bob", "Bob", "Charlie", "Charlie"],
        "test_date": [
            "2023-06-05",
            "2023-06-10",
            "2023-08-10",
            "2023-05-02",
            "2023-05-12",
            "2023-05-15",
        ],
        "result": [
            "Negative",
            "Positive",
            "Positive",
            "Negative",
            "Negative",
            "Negative",
        ],
    }
)

farm_info = pd.DataFrame(
    {
        "farm_id": [1, 2, 3],
        "farm_name": ["Green Acres", "Harvest Hill", "Golden Fields"],
        "location": ["County A", "County B", "County A"],
    }
)

crop_yields = pd.DataFrame(
    {
        "farm_id": [1, 1, 2, 3, 3],
        "crop": ["Wheat", "Corn", "Soybeans", "Wheat", "Barley"],
        "yield_tons": [50, 60, 45, 55, 30],
    }
)

traffic_flow = pd.DataFrame(
    {
        "street_name": [
            "Main St",
            "Main St",
            "Broadway",
            "Broadway",
            "Elm St",
            "Elm St",
        ],
        "time_of_day": ["9am", "2pm", "9am", "2pm", "9am", "2pm"],
        "vehicle_count": [1200, 900, 1500, 1100, 700, 600],
    }
)

pollution_levels = pd.DataFrame(
    {
        "street_name": [
            "Main St",
            "Main St",
            "Broadway",
            "Broadway",
            "Elm St",
            "Elm St",
        ],
        "time_of_day": ["9am", "2pm", "9am", "2pm", "9am", "2pm"],
        "pm_2_5_level": [35.5, 42.1, 40.3, 48.2, 25.7, 30.9],
    }
)

test_info_diff = pd.DataFrame(
    {
        "name": ["alice", "Bob", "Charlie "],
        "test_date": ["2023-06-05", "2023-08-10", "2023-05-02"],
        "result": ["Negative", "Positive", "Negative"],
    }
)

asia_countries = pd.DataFrame(
    {
        "Country": ["India", "Indonesia", "Philippines"],
        "Capital": ["New Delhi", "Jakarta", "Manila"],
    }
)

asia_population = pd.DataFrame(
    {
        "Country": ["India", "indonesia", "Philipines"],
        "Population": [1393000000, 273500000, 113000000],
        "Life_Expectancy": [69.7, 71.7, 72.7],
    }
)
```

## one to many join


```{python}
people

```


```{python}
test_info_many
```

```{python}
pd.merge(people, test_info_many)
```

# Practice Q:Merging one to many crop yields


```{python}
farm_info
```


```{python}
crop_yields
```


```{python}
pd.merge(farm_info,crop_yields)
# there will be 5 rows in the final dataFrame
```

## multiple key columns


```{python}
traffic_flow
```


```{python}
pollution_levels
```


```{python}
# incorrect
pd.merge(traffic_flow, pollution_levels, on="street_name" )
```


```{python}
pd.merge(traffic_flow, pollution_levels, on=["street_name", "time_of_day" ])
```

## practice Q: calculate oil consumption per capita


```{python}
oil_consumption
```

```{python}
tidyr_population
```


```{python}
merged_df =pd.merge(
    oil_consumption, 
    tidyr_population, 
    on=["country", "year"],  
    how="left"
)
merged_df
```


```{python}
merged_df["consumption_per_capita"] = merged_df["oil_consump"] / merged_df["population"]
merged_df["consumption_per_capita"]
merged_df 
```



```{python}
df_1995 = merged_df.query("year == 1995")
df_1995
```


```{python}
highest_per_capita_country = df_1995.sort_values("consumption_per_capita", ascending=False).head(1)
highest_per_capita_country
```

singapore has the highest per capita oil consumption in 1995

## Key Mismatches 


```{python}
people
```


```{python}
test_info_diff
```


```{python}
pd.merge(people, test_info_diff, on="name", how="inner")

```


```{python}
test_info_diff['name'] = test_info_diff['name'].str.title()
test_info_diff
```



```{python}
test_info_diff['name'].unique()
```


```{python}
test_info_diff['name'] = test_info_diff['name'].str.strip()
test_info_diff
```

```{python}
pd.merge(people,test_info_diff)
```


# practice Q: Inner join countries


```{python}
asia_countries
```


```{python}
asia_population["Country"].unique

# the indonesia begins with a lower case in this data and philippines is spelt with only one p"philipines"
```



```{python}
pd.merge(asia_countries, asia_population)
```



```{python}
# this corrects the capitalization issue
asia_population['Country'] = asia_population['Country'].str.title()
asia_population
```





```{python}
# this code replaces the "p" in the missing
asia_population['Country'] = asia_population['Country'].replace('Philipines', 'Philippines')
asia_population
```


```{python}
# final code
pd.merge(asia_countries, asia_population)
```

## Key Mismatches: oil consumption example


```{python}
oil_consumption
```


```{python}
tidyr_population
```


```{python}
oil_consumption.sort_values(["country", "year"])
```


```{python}
oil_pop= pd.merge(oil_consumption, tidyr_population, how ="left", on=["country","year"]).sort_values(["country","year"])
oil_pop
```


```{python}
# set arithmetric
oil_countries = set(oil_consumption['country'].unique())
pop_countries = set(tidyr_population['country'].unique())
```


```{python}
missing_in_pop = oil_countries - pop_countries
missing_in_pop
```


```{python}
missing_in_oil =  pop_countries- oil_countries 
missing_in_oil
```


```{python}
# example
set_1 = set([1, 2, 3, 4, 5])
set_2 = set([2, 3, 4])
```


```{python}
set_1 - set_2
```


```{python}
set_2 - set_1
```

## Merging with Country Codes


```{python}
cc.convert("Nigeria", to= "ISO3")
```

```{python}
cc.convert("Viet Nam", to="ISO3")
```



```{python}
oil_consumption['country_code'] = cc.convert(oil_consumption['country'], to='ISO3')
tidyr_population['country_code'] = cc.convert(tidyr_population['country'], to='ISO3')
```


```{python}
oil_countries = set(oil_consumption['country_code'].unique())
```

```{python}
pop_countries = set(tidyr_population['country_code'].unique())
```

```{python}
missing_in_pop = oil_countries - pop_countries
missing_in_pop
```

```{python}
missing_in_oil =  pop_countries- oil_countries 
missing_in_oil
```



```{python}
oil_pop_code = oil_consumption.merge(tidyr_population, on=['country_code', 'year'], how='left')
oil_pop_code
```


## practice Q: Merging Oil


```{python}
oil_2012
```


```{python}
country_regions
```


```{python}
oil_2012['country_code'] = cc.convert(oil_2012['country'], to='ISO3')
oil_2012
```


```{python}
# Merge datasets on country_code
oil_2012_regions = oil_2012.merge(country_regions, on='country_code', how='left')
```

```{python}
# Find the country with the highest oil consumption per continent
max_oil_by_continent = oil_2012_regions.loc[
    oil_2012_regions.groupby('continent')['oil_consump'].idxmax()
]
```

```{python}
result= max_oil_by_continent[['country', 'continent', 'oil_consump']]
result
```